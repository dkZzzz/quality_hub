// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/sonarqubepb/sonarqube.proto

package sonarqubepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SonarQubeClient is the client API for SonarQube service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SonarQubeClient interface {
	GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*ProjectResp, error)
	GetProjects(ctx context.Context, in *GetProjectsReq, opts ...grpc.CallOption) (*ProjectResp, error)
	CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectResp, error)
}

type sonarQubeClient struct {
	cc grpc.ClientConnInterface
}

func NewSonarQubeClient(cc grpc.ClientConnInterface) SonarQubeClient {
	return &sonarQubeClient{cc}
}

func (c *sonarQubeClient) GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*ProjectResp, error) {
	out := new(ProjectResp)
	err := c.cc.Invoke(ctx, "/sonarqubepb.SonarQube/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonarQubeClient) GetProjects(ctx context.Context, in *GetProjectsReq, opts ...grpc.CallOption) (*ProjectResp, error) {
	out := new(ProjectResp)
	err := c.cc.Invoke(ctx, "/sonarqubepb.SonarQube/GetProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonarQubeClient) CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectResp, error) {
	out := new(CreateProjectResp)
	err := c.cc.Invoke(ctx, "/sonarqubepb.SonarQube/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SonarQubeServer is the server API for SonarQube service.
// All implementations must embed UnimplementedSonarQubeServer
// for forward compatibility
type SonarQubeServer interface {
	GetProject(context.Context, *GetProjectReq) (*ProjectResp, error)
	GetProjects(context.Context, *GetProjectsReq) (*ProjectResp, error)
	CreateProject(context.Context, *CreateProjectReq) (*CreateProjectResp, error)
	mustEmbedUnimplementedSonarQubeServer()
}

// UnimplementedSonarQubeServer must be embedded to have forward compatible implementations.
type UnimplementedSonarQubeServer struct {
}

func (UnimplementedSonarQubeServer) GetProject(context.Context, *GetProjectReq) (*ProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedSonarQubeServer) GetProjects(context.Context, *GetProjectsReq) (*ProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (UnimplementedSonarQubeServer) CreateProject(context.Context, *CreateProjectReq) (*CreateProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedSonarQubeServer) mustEmbedUnimplementedSonarQubeServer() {}

// UnsafeSonarQubeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SonarQubeServer will
// result in compilation errors.
type UnsafeSonarQubeServer interface {
	mustEmbedUnimplementedSonarQubeServer()
}

func RegisterSonarQubeServer(s grpc.ServiceRegistrar, srv SonarQubeServer) {
	s.RegisterService(&SonarQube_ServiceDesc, srv)
}

func _SonarQube_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonarQubeServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonarqubepb.SonarQube/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonarQubeServer).GetProject(ctx, req.(*GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonarQube_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonarQubeServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonarqubepb.SonarQube/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonarQubeServer).GetProjects(ctx, req.(*GetProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonarQube_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonarQubeServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonarqubepb.SonarQube/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonarQubeServer).CreateProject(ctx, req.(*CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SonarQube_ServiceDesc is the grpc.ServiceDesc for SonarQube service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SonarQube_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonarqubepb.SonarQube",
	HandlerType: (*SonarQubeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _SonarQube_GetProject_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _SonarQube_GetProjects_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _SonarQube_CreateProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sonarqubepb/sonarqube.proto",
}
